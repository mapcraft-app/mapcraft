/* eslint-disable @typescript-eslint/no-explicit-any */

import { accessSync, constants, mkdirSync, writeFile } from 'fs';
import { resolve } from 'path';
import { format } from 'util';

export class LogError extends Error {
	constructor(message: string) {
		super(message);
		this.name = this.constructor.name;
	}
}

/**
 * Write beautiful log file, by default file name is generated by server at starting and don't change; so you can init two instance of same class without problem
 */
export default class Log {
	private path: string;
	private num(n: number): string {
		return (n <= 9)
			? `0${n}`
			: String(n);
	}

	/**
	 * this.fileName = join(String(process.env.LOG), `${process.env.DATE}.log`);
	*/
	constructor(filename?: string) {
		const resolvePath = process.env.LOG ?? resolve('.', 'log');
		this.path = resolve(resolvePath, `${filename ?? process.env.DATE}.log`);
		// bind this for correct refer to this
		this.write = this.write.bind(this);
		this.debug = this.debug.bind(this);
		this.error = this.error.bind(this);
		this.info = this.info.bind(this);
		this.warn = this.warn.bind(this);
		this.psql = this.psql.bind(this);
		try {
			accessSync(resolvePath, constants.F_OK);
		} catch (___) {
			try {
				mkdirSync(resolvePath);
			} catch (e: any) {
				throw new LogError(e.message);
			}
		}
	}

	private write(type: string, data: string): void {
		const date = new Date();
		const printDate = `${date.getUTCFullYear()}-${this.num(date.getUTCMonth() + 1)}-${this.num(date.getUTCDate())} ${this.num(date.getUTCHours())}:${this.num(date.getUTCMinutes())}:${this.num(date.getUTCSeconds())}`;

		let ret = `[${type}] `;
		if (ret.length === 6)
			ret += ' ';
		ret += ` ${printDate} - `;
		ret += data;
		ret += '\n';

		writeFile(this.path, new Uint8Array(Buffer.from(ret)), {
			encoding: 'utf-8',
			flag: 'a'
		},
		(err) => {
			if (err)
				throw new LogError(`fs.writeFile failed - ${err.message}`); 
		});
	}

	/**
	 * Get path of log file
	 */
	get filePath(): string {
		return this.path;
	}

	/**
	 * Log debug message (act like console functions)
	 * @param message message to write
	 * @param optional argument for message
	 */
	debug(message: any, ...optional: any[]): void {
		this.write('debug', (optional.length) 
			? format(message, ...optional)
			: message as string);
	}

	/**
	 * Log error message (act like console functions)
	 * @param message message to write
	 * @param optional argument for message
	 */
	error(message: any, ...optional: any[]): void {
		this.write('error', (optional.length) 
			? format(message, ...optional)
			: message as string);
	}
	
	/**
	 * Log info message (act like console functions)
	 * @param message message to write
	 * @param optional argument for message
	 */
	info(message: any, ...optional: any[]): void {
		this.write('info', (optional.length) 
			? format(message, ...optional)
			: message as string);
	}

	/**
	 * Log warning message (act like console functions)
	 * @param message message to write
	 * @param optional argument for message
	 */
	warn(message: any, ...optional: any[]): void {
		this.write('warn', (optional.length) 
			? format(message, ...optional)
			: message as string);
	}

	/**
	 * Log psql message (act like console functions)
	 * @param message message to write
	 * @param optional argument for message
	 */
	psql(message: any, ...optional: any[]): void {
		this.write('psql', (optional.length) 
			? format(message, ...optional)
			: message as string);
	}
}

/**
 * Default instance of logger
 */
export const log = new Log();
